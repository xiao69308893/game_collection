version: '3.8'

# ============================================
# Game Collection - Docker Compose 配置
# ============================================

services:
  # ------------------
  # 前端应用服务
  # ------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: game-collection-app
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    networks:
      - game-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.game-collection.rule=Host(`gamecollection.local`)"
      - "traefik.http.services.game-collection.loadbalancer.server.port=80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ------------------
  # 开发环境服务
  # ------------------
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: game-collection-dev
    restart: "no"
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3001/api
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    networks:
      - game-network
    profiles:
      - dev
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # ------------------
  # Redis 缓存服务
  # ------------------
  redis:
    image: redis:7-alpine
    container_name: game-collection-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-gameCollection123}
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - game-network
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ------------------
  # Nginx 负载均衡器
  # ------------------
  nginx-lb:
    image: nginx:alpine
    container_name: game-collection-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_cache_lb:/var/cache/nginx
    networks:
      - game-network
    depends_on:
      - app
    profiles:
      - production
    labels:
      - "traefik.enable=false"

  # ------------------
  # 监控服务 - Prometheus
  # ------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: game-collection-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - game-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # ------------------
  # 监控服务 - Grafana
  # ------------------
  grafana:
    image: grafana/grafana:latest
    container_name: game-collection-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-gameCollection123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - game-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # ------------------
  # 日志聚合 - Loki
  # ------------------
  loki:
    image: grafana/loki:latest
    container_name: game-collection-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./docker/loki-config.yml:/etc/loki/local-config.yaml:ro
    networks:
      - game-network
    profiles:
      - monitoring
    command: -config.file=/etc/loki/local-config.yaml

  # ------------------
  # 数据库服务 (可选)
  # ------------------
  postgres:
    image: postgres:15-alpine
    container_name: game-collection-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-gamecollection}
      - POSTGRES_USER=${DB_USER:-gameuser}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-gameCollection123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - game-network
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-gameuser} -d ${DB_NAME:-gamecollection}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ------------------
  # 备份服务
  # ------------------
  backup:
    image: postgres:15-alpine
    container_name: game-collection-backup
    restart: "no"
    environment:
      - POSTGRES_DB=${DB_NAME:-gamecollection}
      - POSTGRES_USER=${DB_USER:-gameuser}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-gameCollection123}
    volumes:
      - ./backups:/backups
      - ./docker/backup.sh:/backup.sh:ro
    networks:
      - game-network
    depends_on:
      - postgres
    profiles:
      - backup
    command: ["sh", "/backup.sh"]

# ============================================
# 网络配置
# ============================================
networks:
  game-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================
# 数据卷配置
# ============================================
volumes:
  # 应用相关
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache_lb:
    driver: local

  # 数据存储
  redis_data:
    driver: local
  postgres_data:
    driver: local

  # 监控相关
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# ============================================
# 扩展配置文件
# ============================================

---
# docker-compose.override.yml - 本地开发覆盖配置
version: '3.8'

services:
  app-dev:
    environment:
      - VITE_DEBUG_MODE=true
      - VITE_ENABLE_ANALYTICS=false
    volumes:
      - .:/app
      - /app/node_modules

---
# docker-compose.prod.yml - 生产环境配置
version: '3.8'

services:
  app:
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  nginx-lb:
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  redis:
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

---
# docker-compose.test.yml - 测试环境配置
version: '3.8'

services:
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: game-collection-test
    environment:
      - NODE_ENV=test
      - CI=true
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - game-network
    command: ["npm", "run", "test"]

  cypress:
    image: cypress/included:latest
    container_name: game-collection-e2e
    environment:
      - CYPRESS_BASE_URL=http://app:80
    volumes:
      - ./cypress:/cypress
      - ./cypress.config.js:/cypress.config.js
    networks:
      - game-network
    depends_on:
      - app
    working_dir: /
    command: ["cypress", "run"]
